name = "/screenshare:stream"
description = "Loop: burst → Gemini answer/transcript (or custom prompt) → pause → repeat."

prompt = '''
You have the tools: screenshare_status, screenshare_start, screenshare_burst.

0) Respect [defaults] for missing args.

Args:
- cycles:int      (0 = run until source closes or safety time)
- pause_secs:int  (default 30)
- mode:str        reply | transcribe | both   (ignored if prompt provided)
- prompt:str      optional; if set, overrides mode
- save_dir, format, n, period_ms, duration_ms, warmup → forwarded to screenshare_burst
- monitor_index,left,top,width,height,scale → for auto-start

Per-cycle:
1) screenshare_status() -> { open: {{open}} }
   If not open: screenshare_start(...); re-check; if still closed → stop politely.
2) screenshare_burst(
     save_dir={{save_dir|'.'}}, format={{format|'jpg'}},
     n={{n|0}}, period_ms={{period_ms|150}}, duration_ms={{duration_ms|10000}},
     warmup={{warmup|0}}
   ) -> { paths: {{paths}} }   # newline-joined
   If {{paths}} empty → stop politely.

3) One shell run (stride, copy to CWD temp, build instruction, call gemini, sleep).
4) Repeat until stop condition.

!{
set -euo pipefail

PATHS_RAW="{{paths}}"
PAUSE="{{pause_secs}}"
[ -z "$PAUSE" ] && PAUSE="30"

MODE="{{mode}}"
USER_PROMPT="{{prompt}}"

# Determine instruction
if [ -n "${USER_PROMPT:-}" ] && [ "${USER_PROMPT}" != "None" ]; then
  INSTR="${USER_PROMPT}"
else
  [ -z "$MODE" ] && MODE="reply"
  case "$MODE" in
    reply)
      INSTR="You are a helpful assistant analyzing ONLY the attached photo sequence (left→right chronological). First infer the user's intent/content from the sequence; then reply concisely. Do not show an intermediate transcript."
      ;;
    transcribe)
      INSTR="Analyze ONLY the attached photo sequence (left→right chronological). Transcribe what the user is conveying. If unsure about a term, bracket it in ALL CAPS. Output ONLY the transcript."
      ;;
    both)
      INSTR="Transcript: <text>
Assistant: <reply>"
      ;;
    *)
      INSTR="Analyze ONLY the attached photo sequence and reply helpfully."
      ;;
  esac
fi

mkdir -p ./.screenshare_tmp
rm -f ./.screenshare_tmp/* 2>/dev/null || true

# Read newline-separated paths
files_raw=()
while IFS= read -r P; do
  [ -z "${P:-}" ] && continue
  files_raw+=("$P")
done <<< "$PATHS_RAW"

if [ "${#files_raw[@]}" -eq 0 ]; then
  echo "No frames returned — ending."
  exit 0
fi

# Stride every other frame; copy to temp; sanitize spaces
files=()
take=1
for P in "${files_raw[@]}"; do
  if [ $take -eq 1 ]; then
    B="${P##*/}"
    S="${B// /_}"
    cp -f -- "$P" "./.screenshare_tmp/$S"
    files+=("@.screenshare_tmp/$S")
    take=0
  else
    take=1
  fi
done

if [ "${#files[@]}" -eq 0 ]; then
  echo "No frames selected after stride — ending."
  exit 0
fi

prefix=""
for f in "${files[@]}"; do
  prefix="$prefix$f "
done

gemini -p "${prefix}${INSTR}"

echo "(pausing ${PAUSE}s before next capture…)"
sleep "$PAUSE"
}

Loop rules:
- If {{cycles}} > 0, repeat that many total cycles unless stopped earlier.
- If {{cycles}} == 0, repeat until screen source closes or ~60 minutes elapse (safety).
'''

[defaults]
# burst defaults
format      = "jpg"
n           = 0
period_ms   = 150
duration_ms = 10000
warmup      = 0
save_dir    = "."

# loop defaults
cycles      = 0
pause_secs  = 30
mode        = "reply"
prompt      = "What can you tell me about this series of images in chronological capture order from left to right?"

# auto-start defaults
monitor_index = 0
left = 0
top = 0
width = 0
height = 0
scale = 1.0
